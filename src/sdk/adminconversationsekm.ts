/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AdminConversationsEkm {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
   *
   * @see {@link https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo} - API method documentation
   */
  async adminConversationsEkmListOriginalConnectedChannelInfo(
    req: operations.AdminConversationsEkmListOriginalConnectedChannelInfoRequest,
    security: operations.AdminConversationsEkmListOriginalConnectedChannelInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminConversationsEkmListOriginalConnectedChannelInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AdminConversationsEkmListOriginalConnectedChannelInfoRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/admin.conversations.ekm.listOriginalConnectedChannelInfo";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdminConversationsEkmListOriginalConnectedChannelInfoSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminConversationsEkmListOriginalConnectedChannelInfoResponse =
      new operations.AdminConversationsEkmListOriginalConnectedChannelInfoResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }
}
