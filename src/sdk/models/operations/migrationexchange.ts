/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class MigrationExchangeSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class MigrationExchangeRequest extends SpeakeasyBase {
  /**
   * Specify team_id starts with `T` in case of Org Token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=team_id",
  })
  teamId?: string;

  /**
   * Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=to_old",
  })
  toOld?: boolean;

  /**
   * Authentication token. Requires scope: `tokens.basic`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token: string;

  /**
   * A comma-separated list of user ids, up to 400 per request
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=users" })
  users: string;
}

export class MigrationExchangeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response when there are no mappings to provide
   */
  @SpeakeasyMetadata()
  migrationExchangeErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response when mappings exist for the specified user IDs
   */
  @SpeakeasyMetadata()
  migrationExchangeSuccessSchema?: Record<string, Record<string, any>>;
}
