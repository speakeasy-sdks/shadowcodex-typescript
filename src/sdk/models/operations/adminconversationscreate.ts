/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class AdminConversationsCreateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class AdminConversationsCreateApplicationJSON extends SpeakeasyBase {
  /**
   * Description of the public or private channel to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * When `true`, creates a private channel instead of a public channel
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_private" })
  isPrivate: boolean;

  /**
   * Name of the public or private channel to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
   */
  @SpeakeasyMetadata()
  @Expose({ name: "org_wide" })
  orgWide?: boolean;

  /**
   * The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "team_id" })
  teamId?: string;
}

export class AdminConversationsCreateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: AdminConversationsCreateApplicationJSON;

  /**
   * Authentication token. Requires scope: `admin.conversations:write`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token: string;
}

export class AdminConversationsCreateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  adminConversationsCreateErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  adminConversationsCreateSchema?: Record<string, Record<string, any>>;
}
