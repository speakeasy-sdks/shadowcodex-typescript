/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class TeamAccessLogsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class TeamAccessLogsRequest extends SpeakeasyBase {
  /**
   * End of time range of logs to include in results (inclusive).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=before",
  })
  before?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=count" })
  count?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: string;

  /**
   * Authentication token. Requires scope: `admin`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token: string;
}

export class TeamAccessLogsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown:
   */
  @SpeakeasyMetadata()
  teamAccessLogsErrorSchema?: Record<string, Record<string, any>>;

  /**
   * This response demonstrates pagination and two access log entries.
   */
  @SpeakeasyMetadata()
  teamAccessLogsSchema?: Record<string, Record<string, any>>;
}
