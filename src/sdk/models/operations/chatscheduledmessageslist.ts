/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class ChatScheduledMessagesListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class ChatScheduledMessagesListRequest extends SpeakeasyBase {
  /**
   * The channel of the scheduled messages
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=channel",
  })
  channel?: string;

  /**
   * For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cursor",
  })
  cursor?: string;

  /**
   * A UNIX timestamp of the latest value in the time range
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=latest",
  })
  latest?: number;

  /**
   * Maximum number of original entries to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * A UNIX timestamp of the oldest value in the time range
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oldest",
  })
  oldest?: number;

  /**
   * Authentication token. Requires scope: `none`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token?: string;
}

export class ChatScheduledMessagesListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response if the channel passed is invalid
   */
  @SpeakeasyMetadata()
  chatScheduledMessagesListErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  chatScheduledMessagesListSchema?: Record<string, Record<string, any>>;
}
