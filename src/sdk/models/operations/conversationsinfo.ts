/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class ConversationsInfoSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class ConversationsInfoRequest extends SpeakeasyBase {
  /**
   * Conversation ID to learn more about
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=channel",
  })
  channel?: string;

  /**
   * Set this to `true` to receive the locale for this conversation. Defaults to `false`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_locale",
  })
  includeLocale?: boolean;

  /**
   * Set to `true` to include the member count for the specified conversation. Defaults to `false`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_num_members",
  })
  includeNumMembers?: boolean;

  /**
   * Authentication token. Requires scope: `conversations:read`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;
}

export class ConversationsInfoResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response when a channel cannot be found
   */
  @SpeakeasyMetadata()
  conversationsInfoErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)
   */
  @SpeakeasyMetadata()
  conversationsInfoSuccessSchema?: Record<string, Record<string, any>>;
}
