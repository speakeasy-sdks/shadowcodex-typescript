/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class ChatScheduleMessageSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class ChatScheduleMessageApplicationJSON extends SpeakeasyBase {
  /**
   * Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as_user" })
  asUser?: boolean;

  /**
   * A JSON-based array of structured attachments, presented as a URL-encoded string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attachments" })
  attachments?: string;

  /**
   * A JSON-based array of structured blocks, presented as a URL-encoded string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocks" })
  blocks?: string;

  /**
   * Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel?: string;

  /**
   * Find and link channel names and usernames.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link_names" })
  linkNames?: boolean;

  /**
   * Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parse" })
  parse?: string;

  /**
   * Unix EPOCH timestamp of time in future to send the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "post_at" })
  postAt?: string;

  /**
   * Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reply_broadcast" })
  replyBroadcast?: boolean;

  /**
   * How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thread_ts" })
  threadTs?: number;

  /**
   * Pass true to enable unfurling of primarily text-based content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unfurl_links" })
  unfurlLinks?: boolean;

  /**
   * Pass false to disable unfurling of media content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unfurl_media" })
  unfurlMedia?: boolean;
}

export class ChatScheduleMessageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: ChatScheduleMessageApplicationJSON;

  /**
   * Authentication token. Requires scope: `chat:write`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token?: string;
}

export class ChatScheduleMessageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)
   */
  @SpeakeasyMetadata()
  chatScheduleMessageErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  chatScheduleMessageSuccessSchema?: Record<string, Record<string, any>>;
}
