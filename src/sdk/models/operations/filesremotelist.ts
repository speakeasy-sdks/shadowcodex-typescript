/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class FilesRemoteListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class FilesRemoteListRequest extends SpeakeasyBase {
  /**
   * Filter files appearing in a specific channel, indicated by its ID.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=channel",
  })
  channel?: string;

  /**
   * Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cursor",
  })
  cursor?: string;

  /**
   * The maximum number of items to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Authentication token. Requires scope: `remote_files:read`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;

  /**
   * Filter files created after this timestamp (inclusive).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ts_from",
  })
  tsFrom?: number;

  /**
   * Filter files created before this timestamp (inclusive).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ts_to" })
  tsTo?: number;
}

export class FilesRemoteListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  defaultErrorTemplate?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  defaultSuccessTemplate?: Record<string, Record<string, any>>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
