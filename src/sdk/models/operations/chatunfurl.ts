/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class ChatUnfurlSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class ChatUnfurlApplicationJSON extends SpeakeasyBase {
  /**
   * Channel ID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: string;

  /**
   * Timestamp of the message to add unfurl behavior to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ts" })
  ts: string;

  /**
   * URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unfurls" })
  unfurls?: string;

  /**
   * Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_auth_message" })
  userAuthMessage?: string;

  /**
   * Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_auth_required" })
  userAuthRequired?: boolean;

  /**
   * Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_auth_url" })
  userAuthUrl?: string;
}

export class ChatUnfurlRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ChatUnfurlApplicationJSON;

  /**
   * Authentication token. Requires scope: `links:write`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token: string;
}

export class ChatUnfurlResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  chatUnfurlErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical, minimal success response
   */
  @SpeakeasyMetadata()
  chatUnfurlSuccessSchema?: Record<string, Record<string, any>>;
}
