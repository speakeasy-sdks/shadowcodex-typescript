/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class RtmConnectSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class RtmConnectRequest extends SpeakeasyBase {
  /**
   * Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=batch_presence_aware",
  })
  batchPresenceAware?: boolean;

  /**
   * Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=presence_sub",
  })
  presenceSub?: boolean;

  /**
   * Authentication token. Requires scope: `rtm:stream`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token: string;
}

export class RtmConnectResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  rtmConnectErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  rtmConnectSchema?: Record<string, Record<string, any>>;
}
