/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class ChatPostEphemeralSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class ChatPostEphemeralApplicationJSON extends SpeakeasyBase {
  /**
   * Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as_user" })
  asUser?: boolean;

  /**
   * A JSON-based array of structured attachments, presented as a URL-encoded string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attachments" })
  attachments?: string;

  /**
   * A JSON-based array of structured blocks, presented as a URL-encoded string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocks" })
  blocks?: string;

  /**
   * Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: string;

  /**
   * Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "icon_emoji" })
  iconEmoji?: string;

  /**
   * URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "icon_url" })
  iconUrl?: string;

  /**
   * Find and link channel names and usernames.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link_names" })
  linkNames?: boolean;

  /**
   * Change how messages are treated. Defaults to `none`. See [below](#formatting).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parse" })
  parse?: string;

  /**
   * How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thread_ts" })
  threadTs?: string;

  /**
   * `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user: string;

  /**
   * Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

export class ChatPostEphemeralRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ChatPostEphemeralApplicationJSON;

  /**
   * Authentication token. Requires scope: `chat:write`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token: string;
}

export class ChatPostEphemeralResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  chatPostEphemeralErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  chatPostEphemeralSuccessSchema?: Record<string, Record<string, any>>;
}
