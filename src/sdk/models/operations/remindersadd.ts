/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class RemindersAddSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class RemindersAddApplicationJSON extends SpeakeasyBase {
  /**
   * The content of the reminder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time: string;

  /**
   * The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: string;
}

export class RemindersAddRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RemindersAddApplicationJSON;

  /**
   * Authentication token. Requires scope: `reminders:write`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token: string;
}

export class RemindersAddResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  remindersAddErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  remindersAddSchema?: Record<string, Record<string, any>>;
}
