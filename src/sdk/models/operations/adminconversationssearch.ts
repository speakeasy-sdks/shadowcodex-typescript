/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class AdminConversationsSearchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class AdminConversationsSearchRequest extends SpeakeasyBase {
  /**
   * Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cursor",
  })
  cursor?: string;

  /**
   * Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Name of the the channel to query by.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search_channel_types",
  })
  searchChannelTypes?: string;

  /**
   * Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_dir",
  })
  sortDir?: string;

  /**
   * Comma separated string of team IDs, signifying the workspaces to search through.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=team_ids",
  })
  teamIds?: string;

  /**
   * Authentication token. Requires scope: `admin.conversations:read`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token: string;
}

export class AdminConversationsSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  adminConversationsSearchErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  adminConversationsSearchSchema?: Record<string, Record<string, any>>;
}
