/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class FilesUploadSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class FilesUploadRequestBody extends SpeakeasyBase {
  /**
   * Comma-separated list of channel names or IDs where the file will be shared.
   */
  @SpeakeasyMetadata({ data: "form, name=channels" })
  channels?: string;

  /**
   * File contents via a POST variable. If omitting this parameter, you must provide a `file`.
   */
  @SpeakeasyMetadata({ data: "form, name=content" })
  content?: string;

  /**
   * File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.
   */
  @SpeakeasyMetadata({ data: "form, name=file" })
  file?: string;

  /**
   * Filename of file.
   */
  @SpeakeasyMetadata({ data: "form, name=filename" })
  filename?: string;

  /**
   * A [file type](/types/file#file_types) identifier.
   */
  @SpeakeasyMetadata({ data: "form, name=filetype" })
  filetype?: string;

  /**
   * The message text introducing the file in specified `channels`.
   */
  @SpeakeasyMetadata({ data: "form, name=initial_comment" })
  initialComment?: string;

  /**
   * Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.
   */
  @SpeakeasyMetadata({ data: "form, name=thread_ts" })
  threadTs?: number;

  /**
   * Title of file.
   */
  @SpeakeasyMetadata({ data: "form, name=title" })
  title?: string;

  /**
   * Authentication token. Requires scope: `files:write:user`
   */
  @SpeakeasyMetadata({ data: "form, name=token" })
  token?: string;
}

export class FilesUploadResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  filesUploadErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Success response after uploading a file to a channel with an initial message
   */
  @SpeakeasyMetadata()
  filesUploadSchema?: Record<string, Record<string, any>>;
}
