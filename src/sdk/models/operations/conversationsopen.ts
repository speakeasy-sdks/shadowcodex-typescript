/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class ConversationsOpenSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  slackAuth: string;
}

export class ConversationsOpenApplicationJSON extends SpeakeasyBase {
  /**
   * Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel?: string;

  /**
   * Boolean, indicates you want the full IM channel definition in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_im" })
  returnIm?: boolean;

  /**
   * Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users?: string;
}

export class ConversationsOpenRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: ConversationsOpenApplicationJSON;

  /**
   * Authentication token. Requires scope: `conversations:write`
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=token" })
  token?: string;
}

export class ConversationsOpenResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Typical error response
   */
  @SpeakeasyMetadata()
  conversationsOpenErrorSchema?: Record<string, Record<string, any>>;

  /**
   * Typical success response
   */
  @SpeakeasyMetadata()
  conversationsOpenSuccessSchema?: Record<string, Record<string, any>>;
}
