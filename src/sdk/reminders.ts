/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Reminders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a reminder.
   *
   * @see {@link https://api.slack.com/methods/reminders.add} - API method documentation
   */
  async remindersAdd(
    req: operations.RemindersAddRequest,
    security: operations.RemindersAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemindersAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemindersAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reminders.add";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemindersAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.RemindersAddResponse =
      new operations.RemindersAddResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersAddSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersAddErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Marks a reminder as complete.
   *
   * @see {@link https://api.slack.com/methods/reminders.complete} - API method documentation
   */
  async remindersComplete(
    req: operations.RemindersCompleteRequest,
    security: operations.RemindersCompleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemindersCompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemindersCompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reminders.complete";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemindersCompleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.RemindersCompleteResponse =
      new operations.RemindersCompleteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersCompleteSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersCompleteErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Deletes a reminder.
   *
   * @see {@link https://api.slack.com/methods/reminders.delete} - API method documentation
   */
  async remindersDelete(
    req: operations.RemindersDeleteRequest,
    security: operations.RemindersDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemindersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemindersDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reminders.delete";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemindersDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.RemindersDeleteResponse =
      new operations.RemindersDeleteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersDeleteSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersDeleteErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Gets information about a reminder.
   *
   * @see {@link https://api.slack.com/methods/reminders.info} - API method documentation
   */
  async remindersInfo(
    req: operations.RemindersInfoRequest,
    security: operations.RemindersInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemindersInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemindersInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reminders.info";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemindersInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.RemindersInfoResponse =
      new operations.RemindersInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersInfoSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersInfoErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Lists all reminders created by or for a given user.
   *
   * @see {@link https://api.slack.com/methods/reminders.list} - API method documentation
   */
  async remindersList(
    req: operations.RemindersListRequest,
    security: operations.RemindersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemindersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemindersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reminders.list";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemindersListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.RemindersListResponse =
      new operations.RemindersListResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersListSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.remindersListErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }
}
