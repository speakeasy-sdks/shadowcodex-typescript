/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Conversations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Archives a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.archive} - API method documentation
   */
  async conversationsArchive(
    req: operations.ConversationsArchiveRequest,
    security: operations.ConversationsArchiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsArchiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsArchiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.archive";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsArchiveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsArchiveResponse =
      new operations.ConversationsArchiveResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsArchiveSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsArchiveErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Closes a direct message or multi-person direct message.
   *
   * @see {@link https://api.slack.com/methods/conversations.close} - API method documentation
   */
  async conversationsClose(
    req: operations.ConversationsCloseRequest,
    security: operations.ConversationsCloseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsCloseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsCloseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.close";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsCloseSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsCloseResponse =
      new operations.ConversationsCloseResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsCloseSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsCloseErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Initiates a public or private channel-based conversation
   *
   * @see {@link https://api.slack.com/methods/conversations.create} - API method documentation
   */
  async conversationsCreate(
    req: operations.ConversationsCreateRequest,
    security: operations.ConversationsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.create";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsCreateResponse =
      new operations.ConversationsCreateResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsCreateSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsCreateErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Fetches a conversation's history of messages and events.
   *
   * @see {@link https://api.slack.com/methods/conversations.history} - API method documentation
   */
  async conversationsHistory(
    req: operations.ConversationsHistoryRequest,
    security: operations.ConversationsHistorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsHistoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.history";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsHistorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsHistoryResponse =
      new operations.ConversationsHistoryResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsHistorySuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsHistoryErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve information about a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.info} - API method documentation
   */
  async conversationsInfo(
    req: operations.ConversationsInfoRequest,
    security: operations.ConversationsInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.info";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsInfoResponse =
      new operations.ConversationsInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsInfoSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsInfoErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Invites users to a channel.
   *
   * @see {@link https://api.slack.com/methods/conversations.invite} - API method documentation
   */
  async conversationsInvite(
    req: operations.ConversationsInviteRequest,
    security: operations.ConversationsInviteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsInviteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsInviteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.invite";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsInviteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsInviteResponse =
      new operations.ConversationsInviteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsInviteErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Joins an existing conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.join} - API method documentation
   */
  async conversationsJoin(
    req: operations.ConversationsJoinRequest,
    security: operations.ConversationsJoinSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsJoinResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsJoinRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.join";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsJoinSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsJoinResponse =
      new operations.ConversationsJoinResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsJoinSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsJoinErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Removes a user from a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.kick} - API method documentation
   */
  async conversationsKick(
    req: operations.ConversationsKickRequest,
    security: operations.ConversationsKickSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsKickResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsKickRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.kick";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsKickSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsKickResponse =
      new operations.ConversationsKickResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsKickSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsKickErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Leaves a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.leave} - API method documentation
   */
  async conversationsLeave(
    req: operations.ConversationsLeaveRequest,
    security: operations.ConversationsLeaveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsLeaveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsLeaveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.leave";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsLeaveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsLeaveResponse =
      new operations.ConversationsLeaveResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsLeaveSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsLeaveErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Lists all channels in a Slack team.
   *
   * @see {@link https://api.slack.com/methods/conversations.list} - API method documentation
   */
  async conversationsList(
    req: operations.ConversationsListRequest,
    security: operations.ConversationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.list";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsListResponse =
      new operations.ConversationsListResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsListSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsListErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Sets the read cursor in a channel.
   *
   * @see {@link https://api.slack.com/methods/conversations.mark} - API method documentation
   */
  async conversationsMark(
    req: operations.ConversationsMarkRequest,
    security: operations.ConversationsMarkSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsMarkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsMarkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.mark";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsMarkSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsMarkResponse =
      new operations.ConversationsMarkResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsMarkSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsMarkErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve members of a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.members} - API method documentation
   */
  async conversationsMembers(
    req: operations.ConversationsMembersRequest,
    security: operations.ConversationsMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.members";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsMembersResponse =
      new operations.ConversationsMembersResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsMembersSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsMembersErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Opens or resumes a direct message or multi-person direct message.
   *
   * @see {@link https://api.slack.com/methods/conversations.open} - API method documentation
   */
  async conversationsOpen(
    req: operations.ConversationsOpenRequest,
    security: operations.ConversationsOpenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsOpenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsOpenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.open";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsOpenSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsOpenResponse =
      new operations.ConversationsOpenResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsOpenSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsOpenErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Renames a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.rename} - API method documentation
   */
  async conversationsRename(
    req: operations.ConversationsRenameRequest,
    security: operations.ConversationsRenameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsRenameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsRenameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.rename";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsRenameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsRenameResponse =
      new operations.ConversationsRenameResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsRenameSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsRenameErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve a thread of messages posted to a conversation
   *
   * @see {@link https://api.slack.com/methods/conversations.replies} - API method documentation
   */
  async conversationsReplies(
    req: operations.ConversationsRepliesRequest,
    security: operations.ConversationsRepliesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsRepliesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsRepliesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.replies";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsRepliesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsRepliesResponse =
      new operations.ConversationsRepliesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsRepliesSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsRepliesErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Sets the purpose for a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.setPurpose} - API method documentation
   */
  async conversationsSetPurpose(
    req: operations.ConversationsSetPurposeRequest,
    security: operations.ConversationsSetPurposeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsSetPurposeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsSetPurposeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/conversations.setPurpose";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsSetPurposeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsSetPurposeResponse =
      new operations.ConversationsSetPurposeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsSetPurposeSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsSetPurposeErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Sets the topic for a conversation.
   *
   * @see {@link https://api.slack.com/methods/conversations.setTopic} - API method documentation
   */
  async conversationsSetTopic(
    req: operations.ConversationsSetTopicRequest,
    security: operations.ConversationsSetTopicSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsSetTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsSetTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.setTopic";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsSetTopicSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsSetTopicResponse =
      new operations.ConversationsSetTopicResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsSetTopicSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsSetTopicErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Reverses conversation archival.
   *
   * @see {@link https://api.slack.com/methods/conversations.unarchive} - API method documentation
   */
  async conversationsUnarchive(
    req: operations.ConversationsUnarchiveRequest,
    security: operations.ConversationsUnarchiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ConversationsUnarchiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConversationsUnarchiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/conversations.unarchive";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ConversationsUnarchiveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConversationsUnarchiveResponse =
      new operations.ConversationsUnarchiveResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsUnarchiveSuccessSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.conversationsUnarchiveErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }
}
