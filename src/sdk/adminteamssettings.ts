/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AdminTeamsSettings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Fetch information about settings in a workspace
   *
   * @see {@link https://api.slack.com/methods/admin.teams.settings.info} - API method documentation
   */
  async adminTeamsSettingsInfo(
    req: operations.AdminTeamsSettingsInfoRequest,
    security: operations.AdminTeamsSettingsInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminTeamsSettingsInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminTeamsSettingsInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin.teams.settings.info";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminTeamsSettingsInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminTeamsSettingsInfoResponse =
      new operations.AdminTeamsSettingsInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Set the default channels of a workspace.
   *
   * @see {@link https://api.slack.com/methods/admin.teams.settings.setDefaultChannels} - API method documentation
   */
  async adminTeamsSettingsSetDefaultChannels(
    req: operations.AdminTeamsSettingsSetDefaultChannelsRequestBody,
    security: operations.AdminTeamsSettingsSetDefaultChannelsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminTeamsSettingsSetDefaultChannelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminTeamsSettingsSetDefaultChannelsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin.teams.settings.setDefaultChannels";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminTeamsSettingsSetDefaultChannelsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminTeamsSettingsSetDefaultChannelsResponse =
      new operations.AdminTeamsSettingsSetDefaultChannelsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Set the description of a given workspace.
   *
   * @see {@link https://api.slack.com/methods/admin.teams.settings.setDescription} - API method documentation
   */
  async adminTeamsSettingsSetDescription(
    req: operations.AdminTeamsSettingsSetDescriptionRequest,
    security: operations.AdminTeamsSettingsSetDescriptionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminTeamsSettingsSetDescriptionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminTeamsSettingsSetDescriptionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin.teams.settings.setDescription";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminTeamsSettingsSetDescriptionSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminTeamsSettingsSetDescriptionResponse =
      new operations.AdminTeamsSettingsSetDescriptionResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * An API method that allows admins to set the discoverability of a given workspace
   *
   * @see {@link https://api.slack.com/methods/admin.teams.settings.setDiscoverability} - API method documentation
   */
  async adminTeamsSettingsSetDiscoverability(
    req: operations.AdminTeamsSettingsSetDiscoverabilityRequest,
    security: operations.AdminTeamsSettingsSetDiscoverabilitySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminTeamsSettingsSetDiscoverabilityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminTeamsSettingsSetDiscoverabilityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin.teams.settings.setDiscoverability";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminTeamsSettingsSetDiscoverabilitySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminTeamsSettingsSetDiscoverabilityResponse =
      new operations.AdminTeamsSettingsSetDiscoverabilityResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Sets the icon of a workspace.
   *
   * @see {@link https://api.slack.com/methods/admin.teams.settings.setIcon} - API method documentation
   */
  async adminTeamsSettingsSetIcon(
    req: operations.AdminTeamsSettingsSetIconRequestBody,
    security: operations.AdminTeamsSettingsSetIconSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminTeamsSettingsSetIconResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminTeamsSettingsSetIconRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin.teams.settings.setIcon";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminTeamsSettingsSetIconSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminTeamsSettingsSetIconResponse =
      new operations.AdminTeamsSettingsSetIconResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Set the name of a given workspace.
   *
   * @see {@link https://api.slack.com/methods/admin.teams.settings.setName} - API method documentation
   */
  async adminTeamsSettingsSetName(
    req: operations.AdminTeamsSettingsSetNameRequest,
    security: operations.AdminTeamsSettingsSetNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdminTeamsSettingsSetNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdminTeamsSettingsSetNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/admin.teams.settings.setName";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdminTeamsSettingsSetNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.AdminTeamsSettingsSetNameResponse =
      new operations.AdminTeamsSettingsSetNameResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }
}
