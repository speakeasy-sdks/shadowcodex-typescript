/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Admin } from "./admin";
import { AdminApps } from "./adminapps";
import { AdminAppsApproved } from "./adminappsapproved";
import { AdminAppsRequests } from "./adminappsrequests";
import { AdminAppsRestricted } from "./adminappsrestricted";
import { AdminConversations } from "./adminconversations";
import { AdminConversationsEkm } from "./adminconversationsekm";
import { AdminConversationsRestrictAccess } from "./adminconversationsrestrictaccess";
import { AdminEmoji } from "./adminemoji";
import { AdminInviteRequests } from "./admininviterequests";
import { AdminInviteRequestsApproved } from "./admininviterequestsapproved";
import { AdminInviteRequestsDenied } from "./admininviterequestsdenied";
import { AdminTeams } from "./adminteams";
import { AdminTeamsAdmins } from "./adminteamsadmins";
import { AdminTeamsOwners } from "./adminteamsowners";
import { AdminTeamsSettings } from "./adminteamssettings";
import { AdminUsergroups } from "./adminusergroups";
import { AdminUsers } from "./adminusers";
import { AdminUsersSession } from "./adminuserssession";
import { Api } from "./api";
import { Apps } from "./apps";
import { AppsEventAuthorizations } from "./appseventauthorizations";
import { AppsPermissions } from "./appspermissions";
import { AppsPermissionsResources } from "./appspermissionsresources";
import { AppsPermissionsScopes } from "./appspermissionsscopes";
import { Auth } from "./auth";
import { Bots } from "./bots";
import { Calls } from "./calls";
import { CallsParticipants } from "./callsparticipants";
import { Chat } from "./chat";
import { ChatScheduledMessages } from "./chatscheduledmessages";
import { Conversations } from "./conversations";
import { Dialog } from "./dialog";
import { Dnd } from "./dnd";
import { Emoji } from "./emoji";
import { Files } from "./files";
import { FilesComments } from "./filescomments";
import { FilesRemote } from "./filesremote";
import { Migration } from "./migration";
import { Oauth } from "./oauth";
import { OauthV2 } from "./oauthv2";
import { Pins } from "./pins";
import { Reactions } from "./reactions";
import { Reminders } from "./reminders";
import { Rtm } from "./rtm";
import { Search } from "./search";
import { Stars } from "./stars";
import { Team } from "./team";
import { TeamProfile } from "./teamprofile";
import { Usergroups } from "./usergroups";
import { UsergroupsUsers } from "./usergroupsusers";
import { Users } from "./users";
import { UsersProfile } from "./usersprofile";
import { Views } from "./views";
import { Workflows } from "./workflows";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://slack.com/api"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * @see {@link https://api.slack.com/web} - Learn more about the Slack Web API
 */
export class SlackSpec {
  public admin: Admin;
  public adminApps: AdminApps;
  public adminAppsApproved: AdminAppsApproved;
  public adminAppsRequests: AdminAppsRequests;
  public adminAppsRestricted: AdminAppsRestricted;
  public adminConversations: AdminConversations;
  public adminConversationsEkm: AdminConversationsEkm;
  public adminConversationsRestrictAccess: AdminConversationsRestrictAccess;
  public adminEmoji: AdminEmoji;
  public adminInviteRequests: AdminInviteRequests;
  public adminInviteRequestsApproved: AdminInviteRequestsApproved;
  public adminInviteRequestsDenied: AdminInviteRequestsDenied;
  public adminTeams: AdminTeams;
  public adminTeamsAdmins: AdminTeamsAdmins;
  public adminTeamsOwners: AdminTeamsOwners;
  public adminTeamsSettings: AdminTeamsSettings;
  public adminUsergroups: AdminUsergroups;
  public adminUsers: AdminUsers;
  public adminUsersSession: AdminUsersSession;
  public api: Api;
  public apps: Apps;
  public appsEventAuthorizations: AppsEventAuthorizations;
  public appsPermissions: AppsPermissions;
  public appsPermissionsResources: AppsPermissionsResources;
  public appsPermissionsScopes: AppsPermissionsScopes;
  public auth: Auth;
  public bots: Bots;
  public calls: Calls;
  public callsParticipants: CallsParticipants;
  public chat: Chat;
  public chatScheduledMessages: ChatScheduledMessages;
  public conversations: Conversations;
  public dialog: Dialog;
  public dnd: Dnd;
  public emoji: Emoji;
  public files: Files;
  public filesComments: FilesComments;
  public filesRemote: FilesRemote;
  public migration: Migration;
  public oauth: Oauth;
  public oauthV2: OauthV2;
  public pins: Pins;
  public reactions: Reactions;
  public reminders: Reminders;
  public rtm: Rtm;
  public search: Search;
  public stars: Stars;
  public team: Team;
  public teamProfile: TeamProfile;
  public usergroups: Usergroups;
  public usergroupsUsers: UsergroupsUsers;
  public users: Users;
  public usersProfile: UsersProfile;
  public views: Views;
  public workflows: Workflows;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "1.0.0";
  private _genVersion = "2.26.1";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.admin = new Admin(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminApps = new AdminApps(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminAppsApproved = new AdminAppsApproved(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminAppsRequests = new AdminAppsRequests(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminAppsRestricted = new AdminAppsRestricted(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminConversations = new AdminConversations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminConversationsEkm = new AdminConversationsEkm(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminConversationsRestrictAccess =
      new AdminConversationsRestrictAccess(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.adminEmoji = new AdminEmoji(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminInviteRequests = new AdminInviteRequests(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminInviteRequestsApproved = new AdminInviteRequestsApproved(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminInviteRequestsDenied = new AdminInviteRequestsDenied(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminTeams = new AdminTeams(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminTeamsAdmins = new AdminTeamsAdmins(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminTeamsOwners = new AdminTeamsOwners(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminTeamsSettings = new AdminTeamsSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminUsergroups = new AdminUsergroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminUsers = new AdminUsers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.adminUsersSession = new AdminUsersSession(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.api = new Api(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.apps = new Apps(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.appsEventAuthorizations = new AppsEventAuthorizations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.appsPermissions = new AppsPermissions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.appsPermissionsResources = new AppsPermissionsResources(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.appsPermissionsScopes = new AppsPermissionsScopes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.auth = new Auth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bots = new Bots(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.calls = new Calls(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.callsParticipants = new CallsParticipants(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.chat = new Chat(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.chatScheduledMessages = new ChatScheduledMessages(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.conversations = new Conversations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dialog = new Dialog(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dnd = new Dnd(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.emoji = new Emoji(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.files = new Files(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.filesComments = new FilesComments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.filesRemote = new FilesRemote(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.migration = new Migration(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.oauth = new Oauth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.oauthV2 = new OauthV2(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pins = new Pins(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reactions = new Reactions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reminders = new Reminders(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rtm = new Rtm(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.search = new Search(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.stars = new Stars(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.team = new Team(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.teamProfile = new TeamProfile(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.usergroups = new Usergroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.usergroupsUsers = new UsergroupsUsers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.usersProfile = new UsersProfile(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.views = new Views(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.workflows = new Workflows(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
