/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Dnd {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Ends the current user's Do Not Disturb session immediately.
   *
   * @see {@link https://api.slack.com/methods/dnd.endDnd} - API method documentation
   */
  async dndEndDnd(
    req: operations.DndEndDndRequest,
    security: operations.DndEndDndSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DndEndDndResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DndEndDndRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dnd.endDnd";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DndEndDndSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DndEndDndResponse = new operations.DndEndDndResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndEndDndSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndEndDndErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Ends the current user's snooze mode immediately.
   *
   * @see {@link https://api.slack.com/methods/dnd.endSnooze} - API method documentation
   */
  async dndEndSnooze(
    req: operations.DndEndSnoozeRequest,
    security: operations.DndEndSnoozeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DndEndSnoozeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DndEndSnoozeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dnd.endSnooze";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DndEndSnoozeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DndEndSnoozeResponse =
      new operations.DndEndSnoozeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndEndSnoozeSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndEndSnoozeErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Retrieves a user's current Do Not Disturb status.
   *
   * @see {@link https://api.slack.com/methods/dnd.info} - API method documentation
   */
  async dndInfo(
    req: operations.DndInfoRequest,
    security: operations.DndInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DndInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DndInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dnd.info";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DndInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DndInfoResponse = new operations.DndInfoResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndInfoSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndInfoErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Turns on Do Not Disturb mode for the current user, or changes its duration.
   *
   * @see {@link https://api.slack.com/methods/dnd.setSnooze} - API method documentation
   */
  async dndSetSnooze(
    req: operations.DndSetSnoozeRequestBody,
    security: operations.DndSetSnoozeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DndSetSnoozeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DndSetSnoozeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dnd.setSnooze";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DndSetSnoozeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DndSetSnoozeResponse =
      new operations.DndSetSnoozeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndSetSnoozeSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.dndSetSnoozeErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Retrieves the Do Not Disturb status for up to 50 users on a team.
   *
   * @see {@link https://api.slack.com/methods/dnd.teamInfo} - API method documentation
   */
  async dndTeamInfo(
    req: operations.DndTeamInfoRequest,
    security: operations.DndTeamInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DndTeamInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DndTeamInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dnd.teamInfo";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DndTeamInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DndTeamInfoResponse =
      new operations.DndTeamInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }
}
