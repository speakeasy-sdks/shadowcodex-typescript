/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Team {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets the access logs for the current team.
   *
   * @see {@link https://api.slack.com/methods/team.accessLogs} - API method documentation
   */
  async teamAccessLogs(
    req: operations.TeamAccessLogsRequest,
    security: operations.TeamAccessLogsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamAccessLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamAccessLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/team.accessLogs";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TeamAccessLogsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.TeamAccessLogsResponse =
      new operations.TeamAccessLogsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamAccessLogsSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamAccessLogsErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Gets billable users information for the current team.
   *
   * @see {@link https://api.slack.com/methods/team.billableInfo} - API method documentation
   */
  async teamBillableInfo(
    req: operations.TeamBillableInfoRequest,
    security: operations.TeamBillableInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamBillableInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamBillableInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/team.billableInfo";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TeamBillableInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.TeamBillableInfoResponse =
      new operations.TeamBillableInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultSuccessTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.defaultErrorTemplate = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Gets information about the current team.
   *
   * @see {@link https://api.slack.com/methods/team.info} - API method documentation
   */
  async teamInfo(
    req: operations.TeamInfoRequest,
    security: operations.TeamInfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/team.info";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TeamInfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.TeamInfoResponse = new operations.TeamInfoResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamInfoSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamInfoErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }

  /**
   * Gets the integration logs for the current team.
   *
   * @see {@link https://api.slack.com/methods/team.integrationLogs} - API method documentation
   */
  async teamIntegrationLogs(
    req: operations.TeamIntegrationLogsRequest,
    security: operations.TeamIntegrationLogsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamIntegrationLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamIntegrationLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/team.integrationLogs";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TeamIntegrationLogsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.TeamIntegrationLogsResponse =
      new operations.TeamIntegrationLogsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamIntegrationLogsSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamIntegrationLogsErrorSchema = utils.objectToClass(
            httpRes?.data
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve a team's profile.
   *
   * @see {@link https://api.slack.com/methods/team.profile.get} - API method documentation
   */
  async teamProfileGet(
    req: operations.TeamProfileGetRequest,
    security: operations.TeamProfileGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamProfileGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamProfileGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/team.profile.get";

    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TeamProfileGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.TeamProfileGetResponse =
      new operations.TeamProfileGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamProfileGetSuccessSchema = utils.objectToClass(httpRes?.data);
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.teamProfileGetErrorSchema = utils.objectToClass(httpRes?.data);
        }
        break;
    }

    return res;
  }
}
